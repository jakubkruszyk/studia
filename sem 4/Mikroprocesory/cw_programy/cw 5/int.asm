LED EQU P1.7
;********* Ustawienie TIMERów *********

;TIMER 0
T0_G EQU 0 ;GATE
T0_C EQU 0 ;COUNTER/-TIMER
T0_M EQU 1 ;MODE (0..3)
TIM0 EQU T0_M+T0_C*4+T0_G*8

;TIMER 1
T1_G EQU 0 ;GATE
T1_C EQU 0 ;COUNTER/-TIMER
T1_M EQU 1 ;MODE (0..3)
TIM1 EQU T1_M+T1_C*4+T1_G*8
TMOD_SET EQU TIM0+TIM1*16

;50[ms] = 50 000[ŠS]*(11.0592[MHz]/12) =
; = 46 080 cykli = 180 * 256
TH0_SET EQU 256-36
TL0_SET EQU 0

TH1_SET EQU 256-36
TL1_SET EQU 0

;==================================
	LJMP	START
; obsługa przerwania	
	ORG 0BH
	LCALL INCREMENT
	RETI
	
	
	ORG	100H
START:
	LCALL LCD_CLR
; interrupt setup
	MOV IE, #10000010B
; timer setup	
	MOV TMOD,#TMOD_SET ;Timer 0 liczy czas
	MOV TH0,#TH0_SET ;Timer 0 na 10ms
	MOV TL0,#TL0_SET
	SETB TR0 ; start timera
	

STOP:
	LCALL WAIT_KEY
	CJNE A, #0AH, STOP
	CPL TR0
	LJMP	STOP
	NOP

INCREMENT:
	MOV TH0, #TH0_SET

	MOV A, R7 ; milisekundy
	ADD A, #1
	MOV B, #100 ; mod 100
	DIV AB
	MOV R7, B
	ADD A, R6 ; sekundy
	MOV B, #100 ; mod 100
	DIV AB
	MOV R6, B;
	LCALL WRITE_TIME
	RET
	

TO_BCD:
	;ZAMIANA NA BCD -POCZĄTEK
	MOV B,#10; DZIELNIK
	DIV AB; WYDZIELAMY CYFRE DZIESIATEK
	SWAP A; PRZESUWAMY CYFRĘ DZIESIĄTEK NA WYŻSZY 4 BITY
	ORL A,B; DODAJEMY CYFRĘ JEDNOŚCI
	;ZAMIANA NA BCD -KONIEC
	RET
	NOP
	
WPROWADZ:
	LCALL WAIT_KEY ; Wczytaj liczbę dziesiątek
	MOV B,#10 ; pomnóż
	MUL AB ; przez 10
	MOV R1,A ; zapisz liczbę w R1
	LCALL WAIT_KEY ;wczytaj liczbę jedności
	ADD A,R1 ; dodaj liczbę jedności do R1
	RET ; wyjdź z podprogramu. Wynik w A.

WRITE_TIME:
	LCALL LCD_CLR
	
	MOV A, R6; sekundy
	LCALL TO_BCD
	LCALL WRITE_HEX
	
	MOV A, #','
	LCALL WRITE_DATA
	
	MOV A, R7; milisekundy
	LCALL TO_BCD
	LCALL WRITE_HEX
	
	RET
	